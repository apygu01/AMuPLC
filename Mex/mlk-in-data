
  ---------------------------
   AMuPLC mlk-in-data format
  ---------------------------

  AMuPLC : Appyo Music Programming Language Compiler
  Copyright (c) 2025 appyo.ht All rights reserved.

  This program is distributed in the hope that it will be useful and/or
  interesting, but WITHOUT ANY WARRANTY; without even the implied warranty
  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  This is released under the MIT license.
  https://opensource.org/licenses/mit-license.php


mlk input data format
Header       : FFvwxxyy
 v(gate)     : gate number
 w(chan)     : channel number
 xx(trak)    : track (0-35)
 yy(memb)    : member
 ex. #define gate 0       v = 0
     #define channel 1    w = 1
     #define track  2     xx = 2
     #define member 1     yy = 1

File control : F0xxyyyy
xx           : file type(staff type)
yyyy         : file number(000 - z99)  max = z * 100 + 99 = z99
               ex. Activ conductor staff
                     xx = C 000 yyyy =    0 (xxx_000.meg)
                 exsist conductor stff
                     xx = c 200 yyyy =  200 (xxx_200.meg)
                 exsist midlle staff
                     xx = m 101 yyyy =  101 ( xxx : file name )
                 Active synthesizer staff
                     xx = S A02 yyyy =  1002

SMPTE time code : F1xxxxxx
 xxxxxx         : time code (hour * minites * seconds * frame)
                    max = 24h * 60m * 60s * 30f
                        = 2592000 + 108000 + 1800 + 30
                        = 2701830
                    max = 108000 * hour + 1800 * minites
                          + 30 * seconds + frame
 yxxxxx         : timecode flactional flame
              y : (bit)abbb  a   : 1 (flactional falame flag)
                             bbb : timecode type
                                       0 - 24 flame /sec
                                       1 - 25 flame /sec
                                       2 - 30 flame(drop)/sec
                                       3 - 30 flame(non drop)/sec
          xxxxx : flactional flame
                       0.xx * 100

Master velocity(dynamic) : F2xxyyyy
xx             : reserve
yyyy           : dynamic
                 ex. 68.2% = 682

Phrase data 1  : E1xyzzzz
 x(ftype)      : reserve(frase type)
                 ftype 0 : volume
                       1 : modulation
                       2 : pitch vend
                       3 : control change
 y(fchan)      : channel
 zzzz(fsval)   : frase start value

Phrase data 2  : E2xxyyyy
 xx(fctno)     : frase control number
                 fctno 7 : volume
                       1 : modulation
                  1 - 32 : control change
                     150 : pitch vend
 yyyy(feval)   : frase end value

Phrase data 3  : E3xxxxxx
 xxxxxx(fnval) : frase note value
                 ex. [10 < 70 _/] volume
                     ftype=0 channel=x fsval=10 feval=70 fnval=100000

Phrase data4   : E4xxyyyy
 xx(fxtyp)     : fxtyp 0 : No
                       1 : Interval
                       2 : Number_of_data
 yyyy(fxval)   : Phrase Extention Value


Execution code : E6vvwwxx   
 vv(e6cn)  : execution control no. vv=00(fin),vv=01(1ch,fin),vv=02(2ch)
 ww(e6d1)  :  
 xx(e6d2)  :     
 vv : 0  Title message fin
      1  title message one (ww : data  xx : 00)
      2  title message two (ww : 1st data, xx : 2nd data);
      3  #define direct_time_lock_port xx (ww = 0) /* performer sync port */
      4  #define midi_time_code_port xx (ww = 0)   /* MTC sync port */
      5  #define direct_time_lock_port_and_sync_start xx (ww = 0)
      6  #define midi_time_code_port_and_sync_start xx (ww = 0)
      7  #define direct_time_lock_sync_stop xx (ww = 0)
      8  #define midi_time_code_sync_stop xx (ww = 0)

File control   : F3xxyyyy
xx             : channel
yyyy           : gate(port) number(000 - 999)
 This is used by after F0 code

SMPTE time lag : F4yyyyyy
yyyyyy         : Smpte time lag (flame * 100)

Midi control  : F6vvwwxx
 vv(mist)     : midi status data  vv=00(fin),vv=01(1ch,fin),vv=02(2ch)
 ww(mifd)     : midi first data
 xx(misd)     : midi second data
                ex. <01 33 54 4a 2e> F6020133 f602544a f6012e00

Instrment     : F7vvxxxx
 vv(trns)     : transpose
 xxxx(inst)   : instrment no.
                ex. [vn]   3    13   1   -3 , chanel 13 inst = 1
                    mv->trns = -3 (mr->trns &= 0x00ff)

Key and time  : F8wxyyzz
 w(kscl)      : moll or dur  (none=0,dur=1,moll=2,major=3,minor=4)
 x(ksin)      : key signeture
 yy(ritm)     : rithm
 zz(time)     : time base
                ex. $###3/4 x_moll
                    w(kscl) = 1
                    x(ksin) = 3
                    yy(ritm) = 3
                    zz(time) = 4

Expression    : F9xxyyyy
 xx(egrp)     : expression group
 yyyy(expr)   : expression number
                ex. [amore]   xx = 1 yyyy = ????
                              exp. 234  xx = 77 yyyy = 234

Tempo         : FAxxyyyy    xx > (100 - 200)
 xx(tsym)     : tempo symbol no.
 yyyy(temp)   : tempo 
                ex. [allegro]  xx(tsym) = 5x
                               yyyy(temp) = xxxx
              : FAwwyyyy    ww < 50
 ww(tsym)     : note type 0-21
 yyyy(temp)   : tempo val *100
                ex. [m.m. _/ = 90] ww(tsym) = 9
                                   yyyy(temp) = 9000
                    use mr->nval,mr->tsym,mr->temp

Bar           : FBxxyyyy
 xx(movn)     : movement number
 yyyy(bnum)   : bar number
                ex. -m0100017-_____________..
                    xx(movn) = 1
                    yyyy(bnum) = 17

Synchronize   : FCxxxxxx
 xxxxxx(sync) : synchronize
                ex. $4/4 = 400000 start value

Note off      : FD8xyyzz
 x(chan)      : channel no.
 yy(keyp)     : key position
 zz(voff)     : verociti off (0-120)

Note on       : FD9xyyzz
 x(chan)      : channel no.
 yy(keyp)     : key position
 zz(veon)     : verociti on : dynamik(0-9)

Pol.key.p.    : FDAxyyzz
 x(chan)      : channel no.
 yy(keyp)     : key position
 zz(kprs)     : key presure

Cont.change   : FDBxyyzz
 x(chan)      : channel no.
 yy(cntn)     : control no.
 zz(cntv)     : control value

Prog.change   : FDCxyyzz
 x(chan)      : channel no.
 yy(prgn)     : program number
 zz(....)     : dumy 0xff

?Chan.pres.   : FDDxyyzz (after tatch)
 x(chan)      : channel no.
 yy(ptyp)     : pressure type(vib. etc.)
 zz(prsv)     : pressure value
                ex. 4<  3>  2v

Pitch, vend.  : FDExyyzz
 x(chan)      : channel no.
 yy(pvls)     : vvvvvvv LSB val.
 zz(pvms)     : uuuuuuuu MSB val.

Execution code : E6vvwwxx
 vv(e6cn)  : execution control no. vv=00(fin),vv=01(1ch,fin),vv=02(2ch)
 ww(e6d1)  :
 xx(e6d2)  :
 vv : 0  Title message fin
      1  title message one (ww : data  xx : 00)
      2  title message two (ww : 1st data, xx : 2nd data);
      3  #define direct_time_lock_port xx (ww = 0) /* performer sync port */
      4  #define midi_time_code_port xx (ww = 0)   /* MTC sync port */
      5  #define direct_time_lock_port_and_sync_start xx (ww = 0)
      6  #define midi_time_code_port_and_sync_start xx (ww = 0)
      7  #define direct_time_lock_sync_stop xx (ww = 0)
      8  #define midi_time_code_sync_stop xx (ww = 0)

Final         : FEvvvvvv
 vvvvvv(tcnt) : total output code count

============================================================================

